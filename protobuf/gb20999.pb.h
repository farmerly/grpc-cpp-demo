// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gb20999.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_gb20999_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_gb20999_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_gb20999_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_gb20999_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[12]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_gb20999_2eproto;
class PhaseDownloadRequest;
class PhaseDownloadRequestDefaultTypeInternal;
extern PhaseDownloadRequestDefaultTypeInternal _PhaseDownloadRequest_default_instance_;
class PhaseDownloadResponse;
class PhaseDownloadResponseDefaultTypeInternal;
extern PhaseDownloadResponseDefaultTypeInternal _PhaseDownloadResponse_default_instance_;
class PhaseUploadRequest;
class PhaseUploadRequestDefaultTypeInternal;
extern PhaseUploadRequestDefaultTypeInternal _PhaseUploadRequest_default_instance_;
class PhaseUploadResponse;
class PhaseUploadResponseDefaultTypeInternal;
extern PhaseUploadResponseDefaultTypeInternal _PhaseUploadResponse_default_instance_;
class PlanDownloadRequest;
class PlanDownloadRequestDefaultTypeInternal;
extern PlanDownloadRequestDefaultTypeInternal _PlanDownloadRequest_default_instance_;
class PlanDownloadResponse;
class PlanDownloadResponseDefaultTypeInternal;
extern PlanDownloadResponseDefaultTypeInternal _PlanDownloadResponse_default_instance_;
class PlanUploadRequest;
class PlanUploadRequestDefaultTypeInternal;
extern PlanUploadRequestDefaultTypeInternal _PlanUploadRequest_default_instance_;
class PlanUploadResponse;
class PlanUploadResponseDefaultTypeInternal;
extern PlanUploadResponseDefaultTypeInternal _PlanUploadResponse_default_instance_;
class StageDownloadRequest;
class StageDownloadRequestDefaultTypeInternal;
extern StageDownloadRequestDefaultTypeInternal _StageDownloadRequest_default_instance_;
class StageDownloadResponse;
class StageDownloadResponseDefaultTypeInternal;
extern StageDownloadResponseDefaultTypeInternal _StageDownloadResponse_default_instance_;
class StageUploadRequest;
class StageUploadRequestDefaultTypeInternal;
extern StageUploadRequestDefaultTypeInternal _StageUploadRequest_default_instance_;
class StageUploadResponse;
class StageUploadResponseDefaultTypeInternal;
extern StageUploadResponseDefaultTypeInternal _StageUploadResponse_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::PhaseDownloadRequest* Arena::CreateMaybeMessage<::PhaseDownloadRequest>(Arena*);
template<> ::PhaseDownloadResponse* Arena::CreateMaybeMessage<::PhaseDownloadResponse>(Arena*);
template<> ::PhaseUploadRequest* Arena::CreateMaybeMessage<::PhaseUploadRequest>(Arena*);
template<> ::PhaseUploadResponse* Arena::CreateMaybeMessage<::PhaseUploadResponse>(Arena*);
template<> ::PlanDownloadRequest* Arena::CreateMaybeMessage<::PlanDownloadRequest>(Arena*);
template<> ::PlanDownloadResponse* Arena::CreateMaybeMessage<::PlanDownloadResponse>(Arena*);
template<> ::PlanUploadRequest* Arena::CreateMaybeMessage<::PlanUploadRequest>(Arena*);
template<> ::PlanUploadResponse* Arena::CreateMaybeMessage<::PlanUploadResponse>(Arena*);
template<> ::StageDownloadRequest* Arena::CreateMaybeMessage<::StageDownloadRequest>(Arena*);
template<> ::StageDownloadResponse* Arena::CreateMaybeMessage<::StageDownloadResponse>(Arena*);
template<> ::StageUploadRequest* Arena::CreateMaybeMessage<::StageUploadRequest>(Arena*);
template<> ::StageUploadResponse* Arena::CreateMaybeMessage<::StageUploadResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class PhaseUploadRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PhaseUploadRequest) */ {
 public:
  inline PhaseUploadRequest() : PhaseUploadRequest(nullptr) {}
  virtual ~PhaseUploadRequest();

  PhaseUploadRequest(const PhaseUploadRequest& from);
  PhaseUploadRequest(PhaseUploadRequest&& from) noexcept
    : PhaseUploadRequest() {
    *this = ::std::move(from);
  }

  inline PhaseUploadRequest& operator=(const PhaseUploadRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PhaseUploadRequest& operator=(PhaseUploadRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PhaseUploadRequest& default_instance();

  static inline const PhaseUploadRequest* internal_default_instance() {
    return reinterpret_cast<const PhaseUploadRequest*>(
               &_PhaseUploadRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PhaseUploadRequest& a, PhaseUploadRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PhaseUploadRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PhaseUploadRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PhaseUploadRequest* New() const final {
    return CreateMaybeMessage<PhaseUploadRequest>(nullptr);
  }

  PhaseUploadRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PhaseUploadRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PhaseUploadRequest& from);
  void MergeFrom(const PhaseUploadRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PhaseUploadRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PhaseUploadRequest";
  }
  protected:
  explicit PhaseUploadRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gb20999_2eproto);
    return ::descriptor_table_gb20999_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCrossIdFieldNumber = 1,
  };
  // string crossId = 1;
  void clear_crossid();
  const std::string& crossid() const;
  void set_crossid(const std::string& value);
  void set_crossid(std::string&& value);
  void set_crossid(const char* value);
  void set_crossid(const char* value, size_t size);
  std::string* mutable_crossid();
  std::string* release_crossid();
  void set_allocated_crossid(std::string* crossid);
  private:
  const std::string& _internal_crossid() const;
  void _internal_set_crossid(const std::string& value);
  std::string* _internal_mutable_crossid();
  public:

  // @@protoc_insertion_point(class_scope:PhaseUploadRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr crossid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gb20999_2eproto;
};
// -------------------------------------------------------------------

class PhaseUploadResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PhaseUploadResponse) */ {
 public:
  inline PhaseUploadResponse() : PhaseUploadResponse(nullptr) {}
  virtual ~PhaseUploadResponse();

  PhaseUploadResponse(const PhaseUploadResponse& from);
  PhaseUploadResponse(PhaseUploadResponse&& from) noexcept
    : PhaseUploadResponse() {
    *this = ::std::move(from);
  }

  inline PhaseUploadResponse& operator=(const PhaseUploadResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PhaseUploadResponse& operator=(PhaseUploadResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PhaseUploadResponse& default_instance();

  static inline const PhaseUploadResponse* internal_default_instance() {
    return reinterpret_cast<const PhaseUploadResponse*>(
               &_PhaseUploadResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PhaseUploadResponse& a, PhaseUploadResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PhaseUploadResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PhaseUploadResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PhaseUploadResponse* New() const final {
    return CreateMaybeMessage<PhaseUploadResponse>(nullptr);
  }

  PhaseUploadResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PhaseUploadResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PhaseUploadResponse& from);
  void MergeFrom(const PhaseUploadResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PhaseUploadResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PhaseUploadResponse";
  }
  protected:
  explicit PhaseUploadResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gb20999_2eproto);
    return ::descriptor_table_gb20999_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReplyFieldNumber = 1,
  };
  // string reply = 1;
  void clear_reply();
  const std::string& reply() const;
  void set_reply(const std::string& value);
  void set_reply(std::string&& value);
  void set_reply(const char* value);
  void set_reply(const char* value, size_t size);
  std::string* mutable_reply();
  std::string* release_reply();
  void set_allocated_reply(std::string* reply);
  private:
  const std::string& _internal_reply() const;
  void _internal_set_reply(const std::string& value);
  std::string* _internal_mutable_reply();
  public:

  // @@protoc_insertion_point(class_scope:PhaseUploadResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reply_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gb20999_2eproto;
};
// -------------------------------------------------------------------

class PhaseDownloadRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PhaseDownloadRequest) */ {
 public:
  inline PhaseDownloadRequest() : PhaseDownloadRequest(nullptr) {}
  virtual ~PhaseDownloadRequest();

  PhaseDownloadRequest(const PhaseDownloadRequest& from);
  PhaseDownloadRequest(PhaseDownloadRequest&& from) noexcept
    : PhaseDownloadRequest() {
    *this = ::std::move(from);
  }

  inline PhaseDownloadRequest& operator=(const PhaseDownloadRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PhaseDownloadRequest& operator=(PhaseDownloadRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PhaseDownloadRequest& default_instance();

  static inline const PhaseDownloadRequest* internal_default_instance() {
    return reinterpret_cast<const PhaseDownloadRequest*>(
               &_PhaseDownloadRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PhaseDownloadRequest& a, PhaseDownloadRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PhaseDownloadRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PhaseDownloadRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PhaseDownloadRequest* New() const final {
    return CreateMaybeMessage<PhaseDownloadRequest>(nullptr);
  }

  PhaseDownloadRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PhaseDownloadRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PhaseDownloadRequest& from);
  void MergeFrom(const PhaseDownloadRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PhaseDownloadRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PhaseDownloadRequest";
  }
  protected:
  explicit PhaseDownloadRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gb20999_2eproto);
    return ::descriptor_table_gb20999_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCrossIdFieldNumber = 1,
  };
  // string crossId = 1;
  void clear_crossid();
  const std::string& crossid() const;
  void set_crossid(const std::string& value);
  void set_crossid(std::string&& value);
  void set_crossid(const char* value);
  void set_crossid(const char* value, size_t size);
  std::string* mutable_crossid();
  std::string* release_crossid();
  void set_allocated_crossid(std::string* crossid);
  private:
  const std::string& _internal_crossid() const;
  void _internal_set_crossid(const std::string& value);
  std::string* _internal_mutable_crossid();
  public:

  // @@protoc_insertion_point(class_scope:PhaseDownloadRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr crossid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gb20999_2eproto;
};
// -------------------------------------------------------------------

class PhaseDownloadResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PhaseDownloadResponse) */ {
 public:
  inline PhaseDownloadResponse() : PhaseDownloadResponse(nullptr) {}
  virtual ~PhaseDownloadResponse();

  PhaseDownloadResponse(const PhaseDownloadResponse& from);
  PhaseDownloadResponse(PhaseDownloadResponse&& from) noexcept
    : PhaseDownloadResponse() {
    *this = ::std::move(from);
  }

  inline PhaseDownloadResponse& operator=(const PhaseDownloadResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PhaseDownloadResponse& operator=(PhaseDownloadResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PhaseDownloadResponse& default_instance();

  static inline const PhaseDownloadResponse* internal_default_instance() {
    return reinterpret_cast<const PhaseDownloadResponse*>(
               &_PhaseDownloadResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PhaseDownloadResponse& a, PhaseDownloadResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PhaseDownloadResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PhaseDownloadResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PhaseDownloadResponse* New() const final {
    return CreateMaybeMessage<PhaseDownloadResponse>(nullptr);
  }

  PhaseDownloadResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PhaseDownloadResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PhaseDownloadResponse& from);
  void MergeFrom(const PhaseDownloadResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PhaseDownloadResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PhaseDownloadResponse";
  }
  protected:
  explicit PhaseDownloadResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gb20999_2eproto);
    return ::descriptor_table_gb20999_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // bool result = 1;
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:PhaseDownloadResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gb20999_2eproto;
};
// -------------------------------------------------------------------

class PlanUploadRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlanUploadRequest) */ {
 public:
  inline PlanUploadRequest() : PlanUploadRequest(nullptr) {}
  virtual ~PlanUploadRequest();

  PlanUploadRequest(const PlanUploadRequest& from);
  PlanUploadRequest(PlanUploadRequest&& from) noexcept
    : PlanUploadRequest() {
    *this = ::std::move(from);
  }

  inline PlanUploadRequest& operator=(const PlanUploadRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlanUploadRequest& operator=(PlanUploadRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlanUploadRequest& default_instance();

  static inline const PlanUploadRequest* internal_default_instance() {
    return reinterpret_cast<const PlanUploadRequest*>(
               &_PlanUploadRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PlanUploadRequest& a, PlanUploadRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PlanUploadRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlanUploadRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlanUploadRequest* New() const final {
    return CreateMaybeMessage<PlanUploadRequest>(nullptr);
  }

  PlanUploadRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlanUploadRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlanUploadRequest& from);
  void MergeFrom(const PlanUploadRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlanUploadRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlanUploadRequest";
  }
  protected:
  explicit PlanUploadRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gb20999_2eproto);
    return ::descriptor_table_gb20999_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCrossIdFieldNumber = 1,
  };
  // string crossId = 1;
  void clear_crossid();
  const std::string& crossid() const;
  void set_crossid(const std::string& value);
  void set_crossid(std::string&& value);
  void set_crossid(const char* value);
  void set_crossid(const char* value, size_t size);
  std::string* mutable_crossid();
  std::string* release_crossid();
  void set_allocated_crossid(std::string* crossid);
  private:
  const std::string& _internal_crossid() const;
  void _internal_set_crossid(const std::string& value);
  std::string* _internal_mutable_crossid();
  public:

  // @@protoc_insertion_point(class_scope:PlanUploadRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr crossid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gb20999_2eproto;
};
// -------------------------------------------------------------------

class PlanUploadResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlanUploadResponse) */ {
 public:
  inline PlanUploadResponse() : PlanUploadResponse(nullptr) {}
  virtual ~PlanUploadResponse();

  PlanUploadResponse(const PlanUploadResponse& from);
  PlanUploadResponse(PlanUploadResponse&& from) noexcept
    : PlanUploadResponse() {
    *this = ::std::move(from);
  }

  inline PlanUploadResponse& operator=(const PlanUploadResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlanUploadResponse& operator=(PlanUploadResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlanUploadResponse& default_instance();

  static inline const PlanUploadResponse* internal_default_instance() {
    return reinterpret_cast<const PlanUploadResponse*>(
               &_PlanUploadResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PlanUploadResponse& a, PlanUploadResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PlanUploadResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlanUploadResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlanUploadResponse* New() const final {
    return CreateMaybeMessage<PlanUploadResponse>(nullptr);
  }

  PlanUploadResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlanUploadResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlanUploadResponse& from);
  void MergeFrom(const PlanUploadResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlanUploadResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlanUploadResponse";
  }
  protected:
  explicit PlanUploadResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gb20999_2eproto);
    return ::descriptor_table_gb20999_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReplyFieldNumber = 1,
  };
  // string reply = 1;
  void clear_reply();
  const std::string& reply() const;
  void set_reply(const std::string& value);
  void set_reply(std::string&& value);
  void set_reply(const char* value);
  void set_reply(const char* value, size_t size);
  std::string* mutable_reply();
  std::string* release_reply();
  void set_allocated_reply(std::string* reply);
  private:
  const std::string& _internal_reply() const;
  void _internal_set_reply(const std::string& value);
  std::string* _internal_mutable_reply();
  public:

  // @@protoc_insertion_point(class_scope:PlanUploadResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reply_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gb20999_2eproto;
};
// -------------------------------------------------------------------

class PlanDownloadRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlanDownloadRequest) */ {
 public:
  inline PlanDownloadRequest() : PlanDownloadRequest(nullptr) {}
  virtual ~PlanDownloadRequest();

  PlanDownloadRequest(const PlanDownloadRequest& from);
  PlanDownloadRequest(PlanDownloadRequest&& from) noexcept
    : PlanDownloadRequest() {
    *this = ::std::move(from);
  }

  inline PlanDownloadRequest& operator=(const PlanDownloadRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlanDownloadRequest& operator=(PlanDownloadRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlanDownloadRequest& default_instance();

  static inline const PlanDownloadRequest* internal_default_instance() {
    return reinterpret_cast<const PlanDownloadRequest*>(
               &_PlanDownloadRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(PlanDownloadRequest& a, PlanDownloadRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PlanDownloadRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlanDownloadRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlanDownloadRequest* New() const final {
    return CreateMaybeMessage<PlanDownloadRequest>(nullptr);
  }

  PlanDownloadRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlanDownloadRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlanDownloadRequest& from);
  void MergeFrom(const PlanDownloadRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlanDownloadRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlanDownloadRequest";
  }
  protected:
  explicit PlanDownloadRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gb20999_2eproto);
    return ::descriptor_table_gb20999_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCrossIdFieldNumber = 1,
  };
  // string crossId = 1;
  void clear_crossid();
  const std::string& crossid() const;
  void set_crossid(const std::string& value);
  void set_crossid(std::string&& value);
  void set_crossid(const char* value);
  void set_crossid(const char* value, size_t size);
  std::string* mutable_crossid();
  std::string* release_crossid();
  void set_allocated_crossid(std::string* crossid);
  private:
  const std::string& _internal_crossid() const;
  void _internal_set_crossid(const std::string& value);
  std::string* _internal_mutable_crossid();
  public:

  // @@protoc_insertion_point(class_scope:PlanDownloadRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr crossid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gb20999_2eproto;
};
// -------------------------------------------------------------------

class PlanDownloadResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlanDownloadResponse) */ {
 public:
  inline PlanDownloadResponse() : PlanDownloadResponse(nullptr) {}
  virtual ~PlanDownloadResponse();

  PlanDownloadResponse(const PlanDownloadResponse& from);
  PlanDownloadResponse(PlanDownloadResponse&& from) noexcept
    : PlanDownloadResponse() {
    *this = ::std::move(from);
  }

  inline PlanDownloadResponse& operator=(const PlanDownloadResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlanDownloadResponse& operator=(PlanDownloadResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlanDownloadResponse& default_instance();

  static inline const PlanDownloadResponse* internal_default_instance() {
    return reinterpret_cast<const PlanDownloadResponse*>(
               &_PlanDownloadResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(PlanDownloadResponse& a, PlanDownloadResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PlanDownloadResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlanDownloadResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlanDownloadResponse* New() const final {
    return CreateMaybeMessage<PlanDownloadResponse>(nullptr);
  }

  PlanDownloadResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlanDownloadResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlanDownloadResponse& from);
  void MergeFrom(const PlanDownloadResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlanDownloadResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlanDownloadResponse";
  }
  protected:
  explicit PlanDownloadResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gb20999_2eproto);
    return ::descriptor_table_gb20999_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // bool result = 1;
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:PlanDownloadResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gb20999_2eproto;
};
// -------------------------------------------------------------------

class StageUploadRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StageUploadRequest) */ {
 public:
  inline StageUploadRequest() : StageUploadRequest(nullptr) {}
  virtual ~StageUploadRequest();

  StageUploadRequest(const StageUploadRequest& from);
  StageUploadRequest(StageUploadRequest&& from) noexcept
    : StageUploadRequest() {
    *this = ::std::move(from);
  }

  inline StageUploadRequest& operator=(const StageUploadRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StageUploadRequest& operator=(StageUploadRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StageUploadRequest& default_instance();

  static inline const StageUploadRequest* internal_default_instance() {
    return reinterpret_cast<const StageUploadRequest*>(
               &_StageUploadRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(StageUploadRequest& a, StageUploadRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StageUploadRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StageUploadRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StageUploadRequest* New() const final {
    return CreateMaybeMessage<StageUploadRequest>(nullptr);
  }

  StageUploadRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StageUploadRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StageUploadRequest& from);
  void MergeFrom(const StageUploadRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StageUploadRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StageUploadRequest";
  }
  protected:
  explicit StageUploadRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gb20999_2eproto);
    return ::descriptor_table_gb20999_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCrossIdFieldNumber = 1,
  };
  // string crossId = 1;
  void clear_crossid();
  const std::string& crossid() const;
  void set_crossid(const std::string& value);
  void set_crossid(std::string&& value);
  void set_crossid(const char* value);
  void set_crossid(const char* value, size_t size);
  std::string* mutable_crossid();
  std::string* release_crossid();
  void set_allocated_crossid(std::string* crossid);
  private:
  const std::string& _internal_crossid() const;
  void _internal_set_crossid(const std::string& value);
  std::string* _internal_mutable_crossid();
  public:

  // @@protoc_insertion_point(class_scope:StageUploadRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr crossid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gb20999_2eproto;
};
// -------------------------------------------------------------------

class StageUploadResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StageUploadResponse) */ {
 public:
  inline StageUploadResponse() : StageUploadResponse(nullptr) {}
  virtual ~StageUploadResponse();

  StageUploadResponse(const StageUploadResponse& from);
  StageUploadResponse(StageUploadResponse&& from) noexcept
    : StageUploadResponse() {
    *this = ::std::move(from);
  }

  inline StageUploadResponse& operator=(const StageUploadResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StageUploadResponse& operator=(StageUploadResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StageUploadResponse& default_instance();

  static inline const StageUploadResponse* internal_default_instance() {
    return reinterpret_cast<const StageUploadResponse*>(
               &_StageUploadResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(StageUploadResponse& a, StageUploadResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StageUploadResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StageUploadResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StageUploadResponse* New() const final {
    return CreateMaybeMessage<StageUploadResponse>(nullptr);
  }

  StageUploadResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StageUploadResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StageUploadResponse& from);
  void MergeFrom(const StageUploadResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StageUploadResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StageUploadResponse";
  }
  protected:
  explicit StageUploadResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gb20999_2eproto);
    return ::descriptor_table_gb20999_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReplyFieldNumber = 1,
  };
  // string reply = 1;
  void clear_reply();
  const std::string& reply() const;
  void set_reply(const std::string& value);
  void set_reply(std::string&& value);
  void set_reply(const char* value);
  void set_reply(const char* value, size_t size);
  std::string* mutable_reply();
  std::string* release_reply();
  void set_allocated_reply(std::string* reply);
  private:
  const std::string& _internal_reply() const;
  void _internal_set_reply(const std::string& value);
  std::string* _internal_mutable_reply();
  public:

  // @@protoc_insertion_point(class_scope:StageUploadResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reply_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gb20999_2eproto;
};
// -------------------------------------------------------------------

class StageDownloadRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StageDownloadRequest) */ {
 public:
  inline StageDownloadRequest() : StageDownloadRequest(nullptr) {}
  virtual ~StageDownloadRequest();

  StageDownloadRequest(const StageDownloadRequest& from);
  StageDownloadRequest(StageDownloadRequest&& from) noexcept
    : StageDownloadRequest() {
    *this = ::std::move(from);
  }

  inline StageDownloadRequest& operator=(const StageDownloadRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StageDownloadRequest& operator=(StageDownloadRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StageDownloadRequest& default_instance();

  static inline const StageDownloadRequest* internal_default_instance() {
    return reinterpret_cast<const StageDownloadRequest*>(
               &_StageDownloadRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(StageDownloadRequest& a, StageDownloadRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StageDownloadRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StageDownloadRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StageDownloadRequest* New() const final {
    return CreateMaybeMessage<StageDownloadRequest>(nullptr);
  }

  StageDownloadRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StageDownloadRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StageDownloadRequest& from);
  void MergeFrom(const StageDownloadRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StageDownloadRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StageDownloadRequest";
  }
  protected:
  explicit StageDownloadRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gb20999_2eproto);
    return ::descriptor_table_gb20999_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCrossIdFieldNumber = 1,
  };
  // string crossId = 1;
  void clear_crossid();
  const std::string& crossid() const;
  void set_crossid(const std::string& value);
  void set_crossid(std::string&& value);
  void set_crossid(const char* value);
  void set_crossid(const char* value, size_t size);
  std::string* mutable_crossid();
  std::string* release_crossid();
  void set_allocated_crossid(std::string* crossid);
  private:
  const std::string& _internal_crossid() const;
  void _internal_set_crossid(const std::string& value);
  std::string* _internal_mutable_crossid();
  public:

  // @@protoc_insertion_point(class_scope:StageDownloadRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr crossid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gb20999_2eproto;
};
// -------------------------------------------------------------------

class StageDownloadResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StageDownloadResponse) */ {
 public:
  inline StageDownloadResponse() : StageDownloadResponse(nullptr) {}
  virtual ~StageDownloadResponse();

  StageDownloadResponse(const StageDownloadResponse& from);
  StageDownloadResponse(StageDownloadResponse&& from) noexcept
    : StageDownloadResponse() {
    *this = ::std::move(from);
  }

  inline StageDownloadResponse& operator=(const StageDownloadResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StageDownloadResponse& operator=(StageDownloadResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StageDownloadResponse& default_instance();

  static inline const StageDownloadResponse* internal_default_instance() {
    return reinterpret_cast<const StageDownloadResponse*>(
               &_StageDownloadResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(StageDownloadResponse& a, StageDownloadResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StageDownloadResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StageDownloadResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StageDownloadResponse* New() const final {
    return CreateMaybeMessage<StageDownloadResponse>(nullptr);
  }

  StageDownloadResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StageDownloadResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StageDownloadResponse& from);
  void MergeFrom(const StageDownloadResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StageDownloadResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StageDownloadResponse";
  }
  protected:
  explicit StageDownloadResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gb20999_2eproto);
    return ::descriptor_table_gb20999_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // bool result = 1;
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:StageDownloadResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gb20999_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PhaseUploadRequest

// string crossId = 1;
inline void PhaseUploadRequest::clear_crossid() {
  crossid_.ClearToEmpty();
}
inline const std::string& PhaseUploadRequest::crossid() const {
  // @@protoc_insertion_point(field_get:PhaseUploadRequest.crossId)
  return _internal_crossid();
}
inline void PhaseUploadRequest::set_crossid(const std::string& value) {
  _internal_set_crossid(value);
  // @@protoc_insertion_point(field_set:PhaseUploadRequest.crossId)
}
inline std::string* PhaseUploadRequest::mutable_crossid() {
  // @@protoc_insertion_point(field_mutable:PhaseUploadRequest.crossId)
  return _internal_mutable_crossid();
}
inline const std::string& PhaseUploadRequest::_internal_crossid() const {
  return crossid_.Get();
}
inline void PhaseUploadRequest::_internal_set_crossid(const std::string& value) {
  
  crossid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PhaseUploadRequest::set_crossid(std::string&& value) {
  
  crossid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PhaseUploadRequest.crossId)
}
inline void PhaseUploadRequest::set_crossid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  crossid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:PhaseUploadRequest.crossId)
}
inline void PhaseUploadRequest::set_crossid(const char* value,
    size_t size) {
  
  crossid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PhaseUploadRequest.crossId)
}
inline std::string* PhaseUploadRequest::_internal_mutable_crossid() {
  
  return crossid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PhaseUploadRequest::release_crossid() {
  // @@protoc_insertion_point(field_release:PhaseUploadRequest.crossId)
  return crossid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PhaseUploadRequest::set_allocated_crossid(std::string* crossid) {
  if (crossid != nullptr) {
    
  } else {
    
  }
  crossid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), crossid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PhaseUploadRequest.crossId)
}

// -------------------------------------------------------------------

// PhaseUploadResponse

// string reply = 1;
inline void PhaseUploadResponse::clear_reply() {
  reply_.ClearToEmpty();
}
inline const std::string& PhaseUploadResponse::reply() const {
  // @@protoc_insertion_point(field_get:PhaseUploadResponse.reply)
  return _internal_reply();
}
inline void PhaseUploadResponse::set_reply(const std::string& value) {
  _internal_set_reply(value);
  // @@protoc_insertion_point(field_set:PhaseUploadResponse.reply)
}
inline std::string* PhaseUploadResponse::mutable_reply() {
  // @@protoc_insertion_point(field_mutable:PhaseUploadResponse.reply)
  return _internal_mutable_reply();
}
inline const std::string& PhaseUploadResponse::_internal_reply() const {
  return reply_.Get();
}
inline void PhaseUploadResponse::_internal_set_reply(const std::string& value) {
  
  reply_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PhaseUploadResponse::set_reply(std::string&& value) {
  
  reply_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PhaseUploadResponse.reply)
}
inline void PhaseUploadResponse::set_reply(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reply_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:PhaseUploadResponse.reply)
}
inline void PhaseUploadResponse::set_reply(const char* value,
    size_t size) {
  
  reply_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PhaseUploadResponse.reply)
}
inline std::string* PhaseUploadResponse::_internal_mutable_reply() {
  
  return reply_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PhaseUploadResponse::release_reply() {
  // @@protoc_insertion_point(field_release:PhaseUploadResponse.reply)
  return reply_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PhaseUploadResponse::set_allocated_reply(std::string* reply) {
  if (reply != nullptr) {
    
  } else {
    
  }
  reply_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reply,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PhaseUploadResponse.reply)
}

// -------------------------------------------------------------------

// PhaseDownloadRequest

// string crossId = 1;
inline void PhaseDownloadRequest::clear_crossid() {
  crossid_.ClearToEmpty();
}
inline const std::string& PhaseDownloadRequest::crossid() const {
  // @@protoc_insertion_point(field_get:PhaseDownloadRequest.crossId)
  return _internal_crossid();
}
inline void PhaseDownloadRequest::set_crossid(const std::string& value) {
  _internal_set_crossid(value);
  // @@protoc_insertion_point(field_set:PhaseDownloadRequest.crossId)
}
inline std::string* PhaseDownloadRequest::mutable_crossid() {
  // @@protoc_insertion_point(field_mutable:PhaseDownloadRequest.crossId)
  return _internal_mutable_crossid();
}
inline const std::string& PhaseDownloadRequest::_internal_crossid() const {
  return crossid_.Get();
}
inline void PhaseDownloadRequest::_internal_set_crossid(const std::string& value) {
  
  crossid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PhaseDownloadRequest::set_crossid(std::string&& value) {
  
  crossid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PhaseDownloadRequest.crossId)
}
inline void PhaseDownloadRequest::set_crossid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  crossid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:PhaseDownloadRequest.crossId)
}
inline void PhaseDownloadRequest::set_crossid(const char* value,
    size_t size) {
  
  crossid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PhaseDownloadRequest.crossId)
}
inline std::string* PhaseDownloadRequest::_internal_mutable_crossid() {
  
  return crossid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PhaseDownloadRequest::release_crossid() {
  // @@protoc_insertion_point(field_release:PhaseDownloadRequest.crossId)
  return crossid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PhaseDownloadRequest::set_allocated_crossid(std::string* crossid) {
  if (crossid != nullptr) {
    
  } else {
    
  }
  crossid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), crossid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PhaseDownloadRequest.crossId)
}

// -------------------------------------------------------------------

// PhaseDownloadResponse

// bool result = 1;
inline void PhaseDownloadResponse::clear_result() {
  result_ = false;
}
inline bool PhaseDownloadResponse::_internal_result() const {
  return result_;
}
inline bool PhaseDownloadResponse::result() const {
  // @@protoc_insertion_point(field_get:PhaseDownloadResponse.result)
  return _internal_result();
}
inline void PhaseDownloadResponse::_internal_set_result(bool value) {
  
  result_ = value;
}
inline void PhaseDownloadResponse::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:PhaseDownloadResponse.result)
}

// -------------------------------------------------------------------

// PlanUploadRequest

// string crossId = 1;
inline void PlanUploadRequest::clear_crossid() {
  crossid_.ClearToEmpty();
}
inline const std::string& PlanUploadRequest::crossid() const {
  // @@protoc_insertion_point(field_get:PlanUploadRequest.crossId)
  return _internal_crossid();
}
inline void PlanUploadRequest::set_crossid(const std::string& value) {
  _internal_set_crossid(value);
  // @@protoc_insertion_point(field_set:PlanUploadRequest.crossId)
}
inline std::string* PlanUploadRequest::mutable_crossid() {
  // @@protoc_insertion_point(field_mutable:PlanUploadRequest.crossId)
  return _internal_mutable_crossid();
}
inline const std::string& PlanUploadRequest::_internal_crossid() const {
  return crossid_.Get();
}
inline void PlanUploadRequest::_internal_set_crossid(const std::string& value) {
  
  crossid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PlanUploadRequest::set_crossid(std::string&& value) {
  
  crossid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PlanUploadRequest.crossId)
}
inline void PlanUploadRequest::set_crossid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  crossid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:PlanUploadRequest.crossId)
}
inline void PlanUploadRequest::set_crossid(const char* value,
    size_t size) {
  
  crossid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PlanUploadRequest.crossId)
}
inline std::string* PlanUploadRequest::_internal_mutable_crossid() {
  
  return crossid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PlanUploadRequest::release_crossid() {
  // @@protoc_insertion_point(field_release:PlanUploadRequest.crossId)
  return crossid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PlanUploadRequest::set_allocated_crossid(std::string* crossid) {
  if (crossid != nullptr) {
    
  } else {
    
  }
  crossid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), crossid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PlanUploadRequest.crossId)
}

// -------------------------------------------------------------------

// PlanUploadResponse

// string reply = 1;
inline void PlanUploadResponse::clear_reply() {
  reply_.ClearToEmpty();
}
inline const std::string& PlanUploadResponse::reply() const {
  // @@protoc_insertion_point(field_get:PlanUploadResponse.reply)
  return _internal_reply();
}
inline void PlanUploadResponse::set_reply(const std::string& value) {
  _internal_set_reply(value);
  // @@protoc_insertion_point(field_set:PlanUploadResponse.reply)
}
inline std::string* PlanUploadResponse::mutable_reply() {
  // @@protoc_insertion_point(field_mutable:PlanUploadResponse.reply)
  return _internal_mutable_reply();
}
inline const std::string& PlanUploadResponse::_internal_reply() const {
  return reply_.Get();
}
inline void PlanUploadResponse::_internal_set_reply(const std::string& value) {
  
  reply_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PlanUploadResponse::set_reply(std::string&& value) {
  
  reply_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PlanUploadResponse.reply)
}
inline void PlanUploadResponse::set_reply(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reply_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:PlanUploadResponse.reply)
}
inline void PlanUploadResponse::set_reply(const char* value,
    size_t size) {
  
  reply_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PlanUploadResponse.reply)
}
inline std::string* PlanUploadResponse::_internal_mutable_reply() {
  
  return reply_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PlanUploadResponse::release_reply() {
  // @@protoc_insertion_point(field_release:PlanUploadResponse.reply)
  return reply_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PlanUploadResponse::set_allocated_reply(std::string* reply) {
  if (reply != nullptr) {
    
  } else {
    
  }
  reply_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reply,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PlanUploadResponse.reply)
}

// -------------------------------------------------------------------

// PlanDownloadRequest

// string crossId = 1;
inline void PlanDownloadRequest::clear_crossid() {
  crossid_.ClearToEmpty();
}
inline const std::string& PlanDownloadRequest::crossid() const {
  // @@protoc_insertion_point(field_get:PlanDownloadRequest.crossId)
  return _internal_crossid();
}
inline void PlanDownloadRequest::set_crossid(const std::string& value) {
  _internal_set_crossid(value);
  // @@protoc_insertion_point(field_set:PlanDownloadRequest.crossId)
}
inline std::string* PlanDownloadRequest::mutable_crossid() {
  // @@protoc_insertion_point(field_mutable:PlanDownloadRequest.crossId)
  return _internal_mutable_crossid();
}
inline const std::string& PlanDownloadRequest::_internal_crossid() const {
  return crossid_.Get();
}
inline void PlanDownloadRequest::_internal_set_crossid(const std::string& value) {
  
  crossid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PlanDownloadRequest::set_crossid(std::string&& value) {
  
  crossid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PlanDownloadRequest.crossId)
}
inline void PlanDownloadRequest::set_crossid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  crossid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:PlanDownloadRequest.crossId)
}
inline void PlanDownloadRequest::set_crossid(const char* value,
    size_t size) {
  
  crossid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PlanDownloadRequest.crossId)
}
inline std::string* PlanDownloadRequest::_internal_mutable_crossid() {
  
  return crossid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PlanDownloadRequest::release_crossid() {
  // @@protoc_insertion_point(field_release:PlanDownloadRequest.crossId)
  return crossid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PlanDownloadRequest::set_allocated_crossid(std::string* crossid) {
  if (crossid != nullptr) {
    
  } else {
    
  }
  crossid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), crossid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PlanDownloadRequest.crossId)
}

// -------------------------------------------------------------------

// PlanDownloadResponse

// bool result = 1;
inline void PlanDownloadResponse::clear_result() {
  result_ = false;
}
inline bool PlanDownloadResponse::_internal_result() const {
  return result_;
}
inline bool PlanDownloadResponse::result() const {
  // @@protoc_insertion_point(field_get:PlanDownloadResponse.result)
  return _internal_result();
}
inline void PlanDownloadResponse::_internal_set_result(bool value) {
  
  result_ = value;
}
inline void PlanDownloadResponse::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:PlanDownloadResponse.result)
}

// -------------------------------------------------------------------

// StageUploadRequest

// string crossId = 1;
inline void StageUploadRequest::clear_crossid() {
  crossid_.ClearToEmpty();
}
inline const std::string& StageUploadRequest::crossid() const {
  // @@protoc_insertion_point(field_get:StageUploadRequest.crossId)
  return _internal_crossid();
}
inline void StageUploadRequest::set_crossid(const std::string& value) {
  _internal_set_crossid(value);
  // @@protoc_insertion_point(field_set:StageUploadRequest.crossId)
}
inline std::string* StageUploadRequest::mutable_crossid() {
  // @@protoc_insertion_point(field_mutable:StageUploadRequest.crossId)
  return _internal_mutable_crossid();
}
inline const std::string& StageUploadRequest::_internal_crossid() const {
  return crossid_.Get();
}
inline void StageUploadRequest::_internal_set_crossid(const std::string& value) {
  
  crossid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StageUploadRequest::set_crossid(std::string&& value) {
  
  crossid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:StageUploadRequest.crossId)
}
inline void StageUploadRequest::set_crossid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  crossid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:StageUploadRequest.crossId)
}
inline void StageUploadRequest::set_crossid(const char* value,
    size_t size) {
  
  crossid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:StageUploadRequest.crossId)
}
inline std::string* StageUploadRequest::_internal_mutable_crossid() {
  
  return crossid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StageUploadRequest::release_crossid() {
  // @@protoc_insertion_point(field_release:StageUploadRequest.crossId)
  return crossid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StageUploadRequest::set_allocated_crossid(std::string* crossid) {
  if (crossid != nullptr) {
    
  } else {
    
  }
  crossid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), crossid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:StageUploadRequest.crossId)
}

// -------------------------------------------------------------------

// StageUploadResponse

// string reply = 1;
inline void StageUploadResponse::clear_reply() {
  reply_.ClearToEmpty();
}
inline const std::string& StageUploadResponse::reply() const {
  // @@protoc_insertion_point(field_get:StageUploadResponse.reply)
  return _internal_reply();
}
inline void StageUploadResponse::set_reply(const std::string& value) {
  _internal_set_reply(value);
  // @@protoc_insertion_point(field_set:StageUploadResponse.reply)
}
inline std::string* StageUploadResponse::mutable_reply() {
  // @@protoc_insertion_point(field_mutable:StageUploadResponse.reply)
  return _internal_mutable_reply();
}
inline const std::string& StageUploadResponse::_internal_reply() const {
  return reply_.Get();
}
inline void StageUploadResponse::_internal_set_reply(const std::string& value) {
  
  reply_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StageUploadResponse::set_reply(std::string&& value) {
  
  reply_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:StageUploadResponse.reply)
}
inline void StageUploadResponse::set_reply(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reply_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:StageUploadResponse.reply)
}
inline void StageUploadResponse::set_reply(const char* value,
    size_t size) {
  
  reply_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:StageUploadResponse.reply)
}
inline std::string* StageUploadResponse::_internal_mutable_reply() {
  
  return reply_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StageUploadResponse::release_reply() {
  // @@protoc_insertion_point(field_release:StageUploadResponse.reply)
  return reply_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StageUploadResponse::set_allocated_reply(std::string* reply) {
  if (reply != nullptr) {
    
  } else {
    
  }
  reply_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reply,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:StageUploadResponse.reply)
}

// -------------------------------------------------------------------

// StageDownloadRequest

// string crossId = 1;
inline void StageDownloadRequest::clear_crossid() {
  crossid_.ClearToEmpty();
}
inline const std::string& StageDownloadRequest::crossid() const {
  // @@protoc_insertion_point(field_get:StageDownloadRequest.crossId)
  return _internal_crossid();
}
inline void StageDownloadRequest::set_crossid(const std::string& value) {
  _internal_set_crossid(value);
  // @@protoc_insertion_point(field_set:StageDownloadRequest.crossId)
}
inline std::string* StageDownloadRequest::mutable_crossid() {
  // @@protoc_insertion_point(field_mutable:StageDownloadRequest.crossId)
  return _internal_mutable_crossid();
}
inline const std::string& StageDownloadRequest::_internal_crossid() const {
  return crossid_.Get();
}
inline void StageDownloadRequest::_internal_set_crossid(const std::string& value) {
  
  crossid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StageDownloadRequest::set_crossid(std::string&& value) {
  
  crossid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:StageDownloadRequest.crossId)
}
inline void StageDownloadRequest::set_crossid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  crossid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:StageDownloadRequest.crossId)
}
inline void StageDownloadRequest::set_crossid(const char* value,
    size_t size) {
  
  crossid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:StageDownloadRequest.crossId)
}
inline std::string* StageDownloadRequest::_internal_mutable_crossid() {
  
  return crossid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StageDownloadRequest::release_crossid() {
  // @@protoc_insertion_point(field_release:StageDownloadRequest.crossId)
  return crossid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StageDownloadRequest::set_allocated_crossid(std::string* crossid) {
  if (crossid != nullptr) {
    
  } else {
    
  }
  crossid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), crossid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:StageDownloadRequest.crossId)
}

// -------------------------------------------------------------------

// StageDownloadResponse

// bool result = 1;
inline void StageDownloadResponse::clear_result() {
  result_ = false;
}
inline bool StageDownloadResponse::_internal_result() const {
  return result_;
}
inline bool StageDownloadResponse::result() const {
  // @@protoc_insertion_point(field_get:StageDownloadResponse.result)
  return _internal_result();
}
inline void StageDownloadResponse::_internal_set_result(bool value) {
  
  result_ = value;
}
inline void StageDownloadResponse::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:StageDownloadResponse.result)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_gb20999_2eproto
